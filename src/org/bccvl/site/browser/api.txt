
First import some necessary stuff.

    >>> import requests
    >>> import xmlrpclib
    >>> from pprint import pprint
    >>> from org.bccvl.site import defaults
    >>> from plone.uuid.interfaces import IUUID
    >>> portal = layer['portal']

Get our dataset object set up in the test fixture.

    >>> abt = portal[defaults.DATASETS_FOLDER_ID][defaults.DATASETS_SPECIES_FOLDER_ID]['ABT']['occurrence.csv']
    >>> abtuid = IUUID(abt)


Now we can call some methods on the dataset object

    >>> abt.absolute_url()
    'http://localhost:.../plone/datasets/species/ABT/occurrence.csv'
    >>> res = requests.get(abt.absolute_url() + '/API/dm/v1/metadata?uuid=' + abtuid)
    >>> res = xmlrpclib.loads(res.content)[0][0]
    >>> pprint(res)
    {'@id': '...',
     '@type': 'org.bccvl.content.dataset',
     'bounds': {'bottom': 1, 'left': 1, 'right': 3, 'top': 3},
     'description': '',
     'file': 'http://localhost:55001/plone/datasets/species/ABT/occurrence.csv/@@download/file/occurrence.csv',
     'filename': 'occurrence.csv',
     'genre': 'DataGenreSpeciesOccurrence',
     'headers': ['Name', 'lon', 'lat'],
     'id': '...',
     'mimetype': 'text/csv',
     'rows': 3,
     'species': {'scientificName': 'Alectura lathami',
                 'taxonID': 'urn:lsid:biodiversity.org.au:afd.taxon:036fcf6e-6acc-4872-b5ce-e28904c50986',
                 'vernacularName': 'Australian Brush-turkey'},
     'title': 'ABT',
     'url': 'http://localhost:55001/plone/datasets/species/ABT/occurrence.csv'}
    >>> res['id'] == abtuid
    True

There is a context less dataset manager API available as well. It is
located at the site root url + '/dm' appended to it.
As this dataset manager has no other context than the site object, we
have to pass in a parameter to tell it in which object we are interested.


    >>> res = requests.get(portal.absolute_url() + '/API/dm/v1/metadata?uuid=' + abtuid)
    >>> res = xmlrpclib.loads(res.content)[0][0]
    >>> pprint(res)
    {'@id': '...',
     '@type': 'org.bccvl.content.dataset',
     'bounds': {'bottom': 1, 'left': 1, 'right': 3, 'top': 3},
     'description': '',
     'file': 'http://localhost:55001/plone/datasets/species/ABT/occurrence.csv/@@download/file/occurrence.csv',
     'filename': 'occurrence.csv',
     'genre': 'DataGenreSpeciesOccurrence',
     'headers': ['Name', 'lon', 'lat'],
     'id': '...',
     'mimetype': 'text/csv',
     'rows': 3,
     'species': {'scientificName': 'Alectura lathami',
                 'taxonID': 'urn:lsid:biodiversity.org.au:afd.taxon:036fcf6e-6acc-4872-b5ce-e28904c50986',
                 'vernacularName': 'Australian Brush-turkey'},
     'title': 'ABT',
     'url': 'http://localhost:55001/plone/datasets/species/ABT/occurrence.csv'}
    >>> res['id'] == abtuid
    True


Vocabulary endpoint:
====================

   >>> res = requests.get(portal.absolute_url() + '/API/site/v1/vocabulary?name=gcm_source')
   >>> pprint(res.json())
    [{u'title': u'Coupled Global Climate Model (CGCM3)',
      u'token': u'cccma-cgcm31'},
     {u'title': u'MIROC3.2 (hires)', u'token': u'ccsr-miroc32hi'},
     {u'title': u'MIROC3.2 (medres)', u'token': u'ccsr-miroc32med'},
     {u'title': u'CNRM-CM3', u'token': u'cnrm-cm3'},
     {u'title': u'CSIRO Mark 3.0', u'token': u'csiro-mk30'},
     {u'title': u'CM2.0 - AOGCM', u'token': u'gfdl-cm20'},
     {u'title': u'CM2.1 - AOGCM', u'token': u'gfdl-cm21'},
     {u'title': u'GISS-EH', u'token': u'giss-modeleh'},
     {u'title': u'GISS-ER', u'token': u'giss-modeler'},
     {u'title': u'FGOALS1.0_g', u'token': u'iap-fgoals10g'},
     {u'title': u'INMCM3.0', u'token': u'inm-cm30'},
     {u'title': u'IPSL-CM4', u'token': u'ipsl-cm4'},
     {u'title': u'ECHAM5/MPI-OM', u'token': u'mpi-echam5'},
     {u'title': u'MRI-CGCM2.3.2', u'token': u'mri-cgcm232a'},
     {u'title': u'Community Climate System Model, version 3.0 (CCSM3)',
      u'token': u'ncar-ccsm30'},
     {u'title': u'Parallel Climate Model (PCM)', u'token': u'ncar-pcm1'},
     {u'title': u'HadCM3', u'token': u'ukmo-hadcm3'},
     {u'title': u'Hadley Centre Global Environmental Model, version 1 (HadGEM1)',
      u'token': u'ukmo-hadgem1'},
     {u'title': u'ACCESS1.0', u'token': u'access1-0'},
     {u'title': u'Beijing Climate Center Climate System Model (BCC_CSM1.1)',
      u'token': u'bcc-csm1-1'},
     {u'title': u'Community Climate System Model, version 4.0 (CCSM4)',
      u'token': u'ncar-ccsm40'},
     {u'title': u'Community Atmosphere Model, version 5.1 (CAM-5.1)',
      u'token': u'cesm1-cam5-1-fv2'},
     {u'title': u'CNRM-CM5', u'token': u'cnrm-cm5'},
     {u'title': u'CM3 - AOGCM', u'token': u'gfdl-cm3'},
     {u'title': u'GFDL Earth System Model, version 2.1 (ESM2G)',
      u'token': u'gfdl-esm2g'},
     {u'title': u'ModelE/Russell 2x2.5xL40 (GISS-E2-R)', u'token': u'giss-e2-r'},
     {u'title': u'Hadley Global Environment Model 2 - Atmosphere (HadGEM2-A)',
      u'token': u'hadgem2-a0'},
     {u'title': u'Hadley Global Environment Model 2 - Carbon Cycle (HadGEM2-CC)',
      u'token': u'hadgem2-cc'},
     {u'title': u'Hadley Global Environment Model 2 - Earth System (HadGEM2-ES)',
      u'token': u'hadgem2-es'},
     {u'title': u'INMCM4.0', u'token': u'inmcm4'},
     {u'title': u'IPSL-CM5A (lores)', u'token': u'ipsl-cm5a-lr'},
     {u'title': u'MIROC-ESM-CHEM', u'token': u'miroc-esm-chem'},
     {u'title': u'MIROC-ESM', u'token': u'miroc-esm'},
     {u'title': u'MIROC5', u'token': u'miroc5'},
     {u'title': u'Max Planck Institute for Meteorology Earth System Model (lores) (MPI-ESM-LR)',
      u'token': u'mpi-esm-lr'},
     {u'title': u'Meteorological Research Institute Global Climate Model, version 3.0 (MRI-CGMC3)',
      u'token': u'mri-cgcm3'},
     {u'title': u'Norwegian Earth System Model (NorESM1-M)',
      u'token': u'noresm1-m'},
     {u'title': u"Mean of 5 GCM's: ECHAM5, GFDL-CM2.0, GFDL-CM2.1, MICRO3.2_MEDRES & UKMO-HadCM",
      u'token': u'gcm-mean-5'}]

   >>> res = requests.get(portal.absolute_url() + '/API/site/v1/vocabulary?name=emsc_source')
   >>> pprint(res.json())
    [{u'title': u'RCP2.6', u'token': u'RCP3PD'},
     {u'title': u'RCP4.5', u'token': u'RCP45'},
     {u'title': u'RCP6.0', u'token': u'RCP6'},
     {u'title': u'RCP8.5', u'token': u'RCP85'},
     {u'title': u'SRESA1B', u'token': u'SRESA1B'},
     {u'title': u'SRESA1FI', u'token': u'SRESA1FI'},
     {u'title': u'SRESA2', u'token': u'SRESA2'},
     {u'title': u'SRESB1', u'token': u'SRESB1'},
     {u'title': u'SRESB2', u'token': u'SRESB2'}]

   >>> res = requests.get(portal.absolute_url() + '/API/site/v1/vocabulary?name=layer_source')
   >>> pprint(res.json())
    [{u'legend': u'temperature',
      u'title': u'B01 - Annual Mean Temperature',
      u'token': u'B01',
      u'tooltip': u'The annual mean temperature approximates the total energy inputs for an ecosystem.',
      u'type': u'climate',
      u'unit': u'degrees C',
      u'unitfull': u'degrees celsius'},
      ...
     {u'legend': u'range-change',
      u'title': u'Change in Range',
      u'token': u'range_change',
      u'tooltip': u'This value indicates whether the range of a species is expanded, contracted or not changed for any given location between current and future projections.',
      u'type': u'range-change',
      u'unit': u' ',
      u'unitfull': u' '}]


TODO: add test cases that fail because of restricted access
